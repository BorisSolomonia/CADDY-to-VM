name: deploy-caddy

on:
  push:
    branches: [ master ]
    paths:
      - 'infra/caddy/**'
  workflow_dispatch: {}

# Cancel older runs of the same workflow on the same ref
concurrency:
  group: deploy-caddy-${{ github.ref }}
  cancel-in-progress: true

# Least-privileged default
permissions:
  contents: read

defaults:
  run:
    shell: bash

# Pull values from GitHub → Settings → Secrets and variables → Actions
# - Variables: VM_HOST (e.g., 35.225.x.x), VM_SSH_USER (e.g., borissolomonia)
# - Secrets:   VM_SSH_KEY (your private SSH key, multiline)
env:
  VM_HOST: ${{ vars.VM_HOST }}
  VM_SSH_USER: ${{ vars.VM_SSH_USER }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: 🔎 Guard: verify required vars/secrets exist
        run: |
          echo "::group::Inputs check"
          missing=0
          if [ -z "${{ env.VM_HOST }}" ]; then echo "::error::Missing repo variable: VM_HOST"; missing=1; fi
          if [ -z "${{ env.VM_SSH_USER }}" ]; then echo "::error::Missing repo variable: VM_SSH_USER"; missing=1; fi
          if [ -z "${{ secrets.VM_SSH_KEY }}" ]; then echo "::error::Missing repo secret: VM_SSH_KEY"; missing=1; fi
          if [ $missing -ne 0 ]; then
            echo "Required inputs are missing. Aborting."; exit 1
          fi
          echo "VM_HOST: ${{ env.VM_HOST }}"
          echo "VM_SSH_USER: ${{ env.VM_SSH_USER }}"
          echo "::endgroup::"

      - name: 🧰 Prep: add host key (avoid interactive SSH prompt)
        run: |
          echo "::group::Known hosts"
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ env.VM_HOST }}" >> ~/.ssh/known_hosts 2>/dev/null
          echo "Known hosts now contains:"
          wc -l ~/.ssh/known_hosts || true
          echo "::endgroup::"

      - name: 🗺️ Show what we’re about to deploy
        run: |
          echo "::group::Tree infra/caddy"
          if [ -d infra/caddy ]; then
            ls -la infra/caddy || true
            echo
            echo "File list:"
            find infra/caddy -maxdepth 2 -type f -print | sort
          else
            echo "::error::Directory infra/caddy does not exist."
            exit 1
          fi
          echo "::endgroup::"

      - name: 📤 Copy caddy files to VM (SCP)
        uses: appleboy/scp-action@v0.1.7
        with:
          host:     ${{ env.VM_HOST }}
          username: ${{ env.VM_SSH_USER }}
          key:      ${{ secrets.VM_SSH_KEY }}
          port: 22
          # We want only the contents of infra/caddy/ in the target dir,
          # not the leading "infra/caddy" folders. Use strip_components: 2.
          source: "infra/caddy/*"
          target: "/home/${{ env.VM_SSH_USER }}/caddy"
          overwrite: true
          strip_components: 2
          timeout: 30s
          command_timeout: 10m
          debug: true

      - name: 🔐 Remote prep (create target dir, fix perms, list contents)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ env.VM_HOST }}
          username: ${{ env.VM_SSH_USER }}
          key:      ${{ secrets.VM_SSH_KEY }}
          script_stop: true
          script: |
            set -euo pipefail
            echo "==> Ensuring target dir exists and is owned by ${USER}"
            TARGET_DIR="/home/${USER}/caddy"
            mkdir -p "$TARGET_DIR"
            chmod 755 "$TARGET_DIR"
            echo "==> Listing target dir:"
            ls -la "$TARGET_DIR"

      - name: ✅ Validate Caddyfile (before touching running services)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ env.VM_HOST }}
          username: ${{ env.VM_SSH_USER }}
          key:      ${{ secrets.VM_SSH_KEY }}
          script_stop: true
          script: |
            set -euo pipefail
            TARGET_DIR="/home/${USER}/caddy"
            CONFIG="${TARGET_DIR}/Caddyfile"
            if [ ! -f "$CONFIG" ]; then
              echo "Caddyfile not found at $CONFIG"
              ls -la "$TARGET_DIR" || true
              exit 1
            fi
            echo "==> Validating Caddyfile at $CONFIG"
            docker run --rm -v "$CONFIG:/etc/caddy/Caddyfile:ro" caddy:2 \
              caddy validate --config /etc/caddy/Caddyfile
            echo "Caddyfile validation OK."

      - name: 🧩 Bring up Caddy with docker compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ env.VM_HOST }}
          username: ${{ env.VM_SSH_USER }}
          key:      ${{ secrets.VM_SSH_KEY }}
          script_stop: true
          script: |
            set -euo pipefail
            TARGET_DIR="/home/${USER}/caddy"
            echo "==> Ensuring docker & compose are available"
            docker --version
            docker compose version

            echo "==> Creating docker network 'web' (idempotent)"
            docker network create web 2>/dev/null || true

            echo "==> Starting (or updating) Caddy stack"
            cd "$TARGET_DIR"
            docker compose up -d

            echo "==> Current compose services"
            docker compose ps

      - name: 📜 Tail Caddy logs (last 200 lines)
        uses: appleboy/ssh-action@v1.0.3
        if: always()
        with:
          host:     ${{ env.VM_HOST }}
          username: ${{ env.VM_SSH_USER }}
          key:      ${{ secrets.VM_SSH_KEY }}
          script_stop: false
          script: |
            set -euo pipefail
            TARGET_DIR="/home/${USER}/caddy"
            cd "$TARGET_DIR"
            echo "==> Recent logs from 'caddy' service"
            docker compose logs --tail=200 caddy || true

      - name: 🩺 Health checks (HTTP/HTTPS local)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ env.VM_HOST }}
          username: ${{ env.VM_SSH_USER }}
          key:      ${{ secrets.VM_SSH_KEY }}
          script_stop: false
          script: |
            set -euo pipefail
            echo "==> HTTP check"
            set +e
            curl -I --max-time 10 http://127.0.0.1/ || EXIT1=$?
            echo "==> HTTPS check (ignoring cert since hostname is 127.0.0.1)"
            curl -I --max-time 10 -k https://127.0.0.1/ || EXIT2=$?
            if [ "${EXIT1:-0}" -ne 0 ] || [ "${EXIT2:-0}" -ne 0 ]; then
              echo "One or more health checks failed. See Caddy logs above."
              exit 1
            fi
            echo "Local health checks OK."

      - name: ✅ Done
        run: echo "Deployment finished successfully."







# name: deploy-caddy
# on:
#   push:
#     paths:
#       - 'infra/caddy/**'
#     branches: [ master ]
#   workflow_dispatch: {}

# env:
#   VM_HOST:     ${{ vars.VM_HOST }}       # 35.225.153.97
#   VM_SSH_USER: ${{ vars.VM_SSH_USER }}   # e.g. borissolomonia

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4

#       - name: Copy caddy files
#         uses: appleboy/scp-action@v0.1.7
#         with:
#           host: "35.225.153.97"
#           username: "borissolomonia"
#           key: ${{ secrets.VM_SSH_KEY }}
#           source: "caddy/*"
#           target: "~/caddy"
#           overwrite: true
#           strip_components: 1

#       - name: Bring up Caddy and reload
#         uses: appleboy/ssh-action@v1.0.3
#         with:
#           host: "35.225.153.97"
#           username: "borissolomonia"
#           key: ${{secrets.VM_SSH_KEY}}
#           script: |
#             set -euo pipefail
#             sudo docker network create web 2>/dev/null || true
#             cd ~/caddy
#             sudo docker compose up -d
#             # wait for caddy to start
#             sleep 5
#             # if already running, just reload config
#             sudo docker compose exec caddy caddy reload --config /etc/caddy/Caddyfile || true
#             # test health endpoint
#             curl -fsS http://127.0.0.1/health || echo "Health check failed, but deployment completed"
